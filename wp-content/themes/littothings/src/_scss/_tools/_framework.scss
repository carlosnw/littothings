//
// Framework grid generation mixins
//
// Used to generate the correct number of grid classes given
// any value of `$grid-columns`
// --------------------------------------------------

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  @extend %clearfix;

  margin-right: auto;
  margin-left: auto;

  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media only screen and (max-width: $screen-max-sm) {
    
    // Bigger gutters on smaller screens
    padding-left:   $grid-gutter-width-small;
    padding-right:  $grid-gutter-width-small;
  }
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  @extend %clearfix;

  margin-left:  ($gutter / -2);
  margin-right: ($gutter / -2);
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".l-col-xs-#{$i}, .l-col-sm-#{$i}, .l-col-md-#{$i}, .l-col-lg-#{$i}, .l-col-xl-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .l-col-xs-#{$i}, .l-col-sm-#{$i}, .l-col-md-#{$i}, .l-col-lg-#{$i}, .l-col-xl-#{$i}";
  }
  #{$list} {
    position: relative;

    // Prevent columns from collapsing when empty
    min-height: 1px;

    // Inner gutter via padding
    padding-left:  ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".l-col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .l-col-#{$class}-#{$i}";
  }
  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .l-col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));

      // Remove bottom margin on last row
      .l-form-row:last-child & {
        margin-bottom: 0;
      }

      &.panel-set {
       
        margin-bottom: 0;
        
      }
    }
  }
  @if ($type == push) and ($index > 0) {
    .l-col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .l-col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .l-col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .l-col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .l-col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

//
// Display Flex
// ------------

@mixin display-flex-only() {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin display-flex() {
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  *display: inline;
  zoom: 1;
}

//
// flex Mixins
// -----------

@mixin flex($grow: 0, $shrink: 1, $basis: auto) {
  @if $basis == 0px {
    -ms-flex: $grow $shrink auto; //ie10 needs auto
    -webkit-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
  }
}

@mixin flex($grow: 0, $shrink: 1, $basis: auto) {
  -ms-flex: $grow $shrink $basis;
  -webkit-flex: $grow $shrink $basis;
  flex: $grow $shrink $basis;
}

@mixin flex-grow($grow:1) {
  -ms-flex-positive: $grow;
  -webkit-flex-grow: $grow;
  flex-grow: $grow;
}

@mixin flex-shrink($shrink:1) {
  -ms-flex-negative: $shrink;
  -webkit-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

@mixin flex-basis($basis:auto) {
  -ms-flex-preferred-size: $basis;
  -webkit-flex-basis: $basis;
  flex-basis: $basis;
}

@mixin flex-flow($direction: row, $wrap: nowrap) {
  -ms-flex-wrap: $wrap;
  -ms-flex-direction: $direction;
  -webkit-flex-flow: $direction $wrap;
  flex-flow: $direction $wrap;
}

@mixin flex-wrap($wrap: wrap) {
  -ms-flex-wrap: $wrap;
  -webkit-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

@mixin flex-direction($direction: row) {
  -ms-flex-direction: $direction;
  -webkit-flex-direction: $direction;
  flex-direction: $direction;
}

//
// Flex align
// -----------

@mixin align-items($align: stretch) {
  @include ms-align-items($align);
  -webkit-align-items: $align;
  align-items: $align;
}

@mixin align-self($align: stretch) {
  @include ms-align-self($align);
  -webkit-align-self: $align;
  align-self: $align;
}

@mixin align-content($align: stretch) {
  @include ms-align-content($align);
  -webkit-align-content: $align;
  align-content: $align;
}

//
// ie10 syntax for flex align
// ----------------------------

@mixin ms-align-items($align) {
  @if $align == flex-start {
    -ms-flex-align: start;
  }
}

@mixin ms-align-items($align) {
  @if $align == flex-end {
    -ms-flex-align: end;
  }
}

@mixin ms-align-items($align) {
  -ms-flex-align: $align;
}

@mixin ms-align-self($align) {
  @if $align == flex-start {
    -ms-flex-item-align: start;
  }
}

@mixin ms-align-self($align) {
  @if $align == flex-end {
    -ms-flex-item-align: end;
  }
}

@mixin ms-align-self($align) {
  -ms-flex-item-align: $align;
}

@mixin ms-align-content($align) {
  @if $align == flex-start {
    -ms-flex-line-pack: start;
  }
}

@mixin ms-align-content($align) {
  @if $align == flex-end {
    -ms-flex-line-pack: end;
  }
}

@mixin ms-align-content($align) {
  -ms-flex-line-pack: $align;
}

//
// justify-content
//
// Uses "text-align" for the fallback inline-block grid
// "text-align" is globally supported and works on all rows except the last
// "text-align-last", where supported, handles the last line (and, happily, grids with only one row)
// ---

@mixin justify-content-start() {
  text-align: left;
  -ms-flex-pack: start;
  -webkit-justify-content: flex-start;
  justify-content: flex-start;
}

@mixin justify-content-end() {
  text-align: right;
  -moz-text-align-last: right;
  text-align-last: right;
  -ms-flex-pack: end;
  -webkit-justify-content: flex-end;
  justify-content: flex-end;
}

@mixin justify-content-center() {
  text-align: center;
  -moz-text-align-last: center;
  text-align-last: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
}

@mixin justify-content-space-between() {
  text-align: justify;
  -moz-text-align-last: justify;
  text-align-last: justify;
  -ms-flex-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
}

@mixin justify-content-space-around() {
  text-align: justify;
  -moz-text-align-last: justify;
  text-align-last: justify;
  -ms-flex-pack: justify;
  -webkit-justify-content: space-around;
  justify-content: space-around;
}

// --------------------------------------------------
// inline-block specific mixins
// --------------------------------------------------

@mixin setupWhitespace() {
  letter-spacing: -0.31em !important;
  *letter-spacing: normal !important;
  word-spacing: -0.43em !important;
}

@mixin resetWhitespace() {
  letter-spacing: normal;
  word-spacing: normal;
  white-space: normal;
}

@mixin resetTextAlign() {
  //
  // We want to reset any text-align properties set by the grid
  // (required for the inline-block fallback)
  // but we don't want to override any text-align properties
  // set on the individual grid__col-x element
  // or on any of it's child elements
  //
  // The "initial" property is not widely supported so a default of "left" and "start" is provided
  // http://caniuse.com/#search=initial
  //
  // 1) set to left by default (works everywhere)
  // 2) set to start (respects right to left text)
  // 3) set to initial
  //
  text-align: left;
  text-align: start;
  text-align: initial;
  -moz-text-align-last: left;
  -moz-text-align-last: start;
  -moz-text-align-last: initial;
  text-align-last: left;
  text-align-last: start;
  text-align-last: initial;
}

// --------------------------------------------------
// order class generation mixins
// --------------------------------------------------

@mixin order($order: 0) {
  -ms-flex-order: $order;
  -webkit-order: $order;
  order: $order;
}

@mixin loop-grid--order-helpers($index, $breakpoint: null) {
  @if $index >= 0 {
    .grid--order-#{$index}#{$breakpoint} {
      @include order($index);
    }
    // next iteration
    @include loop-grid--order-helpers(($index - 1), $breakpoint);
  }
}

@mixin make-grid--order-helpers() {
  @include loop-grid--order-helpers($grid-columns);
}

// --------------------------------------------------
// other mixins
// --------------------------------------------------

@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
  -moz-box-sizing: $boxmodel;
  box-sizing: $boxmodel;
}

@mixin calc-flex-columns($index, $class, $type) {
  @if $type == width and $index > 0 {
    .#{$class}#{$index} {
      width: percentage(($index / $grid-columns));
      *width: percentage(($index / $grid-columns)) - 0.1;

      //for ie6 support you can uncomment this line but it will increase css filesize dramatically
      //@include setupCols();
    }
  }
}

@mixin loop-flex-columns($index, $class, $type) {
  @if $index >= 0 {
    @include calc-flex-columns($index, $class, $type);
    // next iteration
    @include loop-flex-columns(($index - 1), $class, $type);
  }
}

@mixin make-flex-grid($class) {
  @include loop-flex-columns($grid-columns, $class, width);
}

// defaults for all cols
@mixin setupCols() {
  @include display-flex();
  @include flex-direction(column);
  @include resetWhitespace();
  position: relative;
  width: 100%;
  vertical-align: top;

  // Inner gutter via padding
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);

  margin-bottom: $grid-gutter-width;

  #{$no-flexbox} & {
    display: inline-block;
  }
}

// defaults for auto cols
@mixin setupAutoCols() {
  @include flex(1, 0, 0px); // a unit on last value is required by IE10-11
  width: auto !important;
  max-width: 100%;
}